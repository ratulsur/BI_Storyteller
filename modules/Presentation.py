"""
PowerPoint Generator Module
Creates automated PowerPoint presentations from analysis results
"""

import json
import os
from typing import Dict, Any, List
from datetime import datetime


class PPTGenerator:
    """Generate PowerPoint presentations from analysis data"""
    
    def __init__(self):
        self.slide_templates = {
            'title_slide': self._create_title_slide,
            'summary_slide': self._create_summary_slide,
            'eda_slide': self._create_eda_slide,
            'visualization_slide': self._create_visualization_slide,
            'prediction_slide': self._create_prediction_slide,
            'trend_slide': self._create_trend_slide,
            'sentiment_slide': self._create_sentiment_slide,
            'ab_test_slide': self._create_ab_test_slide,
            'recommendation_slide': self._create_recommendation_slide
        }
        
        self.ppt_structure = [
            'title_slide',
            'summary_slide',
            'eda_slide',
            'visualization_slide',
            'prediction_slide',
            'trend_slide',
            'sentiment_slide',
            'ab_test_slide',
            'recommendation_slide'
        ]
    
    def generate_presentation(self, exported_data: Dict[str, Any]) -> str:
        """Generate complete PowerPoint presentation"""
        print("ðŸ“Š Generating PowerPoint presentation...")
        
        # Create presentation structure
        presentation_data = {
            'metadata': {
                'title': 'BI Storyteller - Marketing Analysis Report',
                'created_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'total_slides': 0,
                'data_sources': list(exported_data.keys())
            },
            'slides': []
        }
        
        # Generate slides based on available data
        for slide_type in self.ppt_structure:
            if slide_type == 'title_slide':
                slide = self._create_title_slide(exported_data)
            elif slide_type == 'summary_slide':
                slide = self._create_summary_slide(exported_data)
            elif slide_type in self.slide_templates:
                # Check if we have data for this slide type
                if self._has_data_for_slide(slide_type, exported_data):
                    slide = self.slide_templates[slide_type](exported_data)
                else:
                    continue  # Skip slides without data
            else:
                continue
            
            if slide:
                presentation_data['slides'].append(slide)
        
        presentation_data['metadata']['total_slides'] = len(presentation_data['slides'])
        
        # Save presentation data
        filename = self._save_presentation(presentation_data)
        
        print(f"âœ… PowerPoint presentation generated: {filename}")
        return filename
    
    def _has_data_for_slide(self, slide_type: str, exported_data: Dict[str, Any]) -> bool:
        """Check if we have sufficient data for a specific slide type"""
        data_requirements = {
            'eda_slide': ['eda_results', 'eda'],
            'visualization_slide': ['visualizations'],
            'prediction_slide': ['predictions'],
            'trend_slide': ['trends'],
            'sentiment_slide': ['sentiment'],
            'ab_test_slide': ['ab_test']
        }
        
        if slide_type not in data_requirements:
            return True
        
        required_keys = data_requirements[slide_type]
        return any(key in exported_data for key in required_keys)
    
    def _create_title_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create title slide"""
        return {
            'slide_number': 1,
            'slide_type': 'title',
            'title': 'BI Storyteller',
            'subtitle': 'End-to-End Marketing Analysis Report',
            'content': {
                'main_title': 'BI Storyteller Analysis',
                'subtitle': 'Comprehensive Marketing Data Insights',
                'date': datetime.now().strftime('%B %d, %Y'),
                'data_summary': f"Analysis of {len(exported_data)} data modules",
                'footer': 'Generated by BI Storyteller Automation Platform'
            }
        }
    
    def _create_summary_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create executive summary slide"""
        # Extract key metrics from all data sources
        key_metrics = {}
        
        # EDA metrics
        if 'eda' in exported_data or 'eda_results' in exported_data:
            eda_data = exported_data.get('eda', exported_data.get('eda_results', {}))
            summary_stats = eda_data.get('summary_statistics', {})
            if summary_stats:
                total_responses = sum(stats.get('total_responses', 0) for stats in summary_stats.values())
                key_metrics['total_responses'] = total_responses
                key_metrics['questions_analyzed'] = len(summary_stats)
        
        # Satisfaction metrics
        if 'predictions' in exported_data:
            pred_data = exported_data['predictions']
            metrics = pred_data.get('metrics', {})
            if 'accuracy' in metrics:
                key_metrics['model_accuracy'] = f"{metrics['accuracy']:.1%}"
        
        # Sentiment metrics
        if 'sentiment' in exported_data:
            sentiment_data = exported_data['sentiment']
            distribution = sentiment_data.get('sentiment_distribution', {})
            percentages = distribution.get('percentages', {})
            if percentages:
                key_metrics['positive_sentiment'] = f"{percentages.get('positive', 0):.1f}%"
        
        return {
            'slide_number': 2,
            'slide_type': 'summary',
            'title': 'Executive Summary',
            'content': {
                'key_metrics': key_metrics,
                'data_sources': list(exported_data.keys()),
                'analysis_scope': 'Comprehensive marketing analysis including EDA, predictions, sentiment, and trends',
                'main_findings': [
                    'Data quality assessment completed',
                    'Customer satisfaction patterns identified',
                    'Predictive models developed',
                    'Actionable recommendations generated'
                ]
            }
        }
    
    def _create_eda_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create EDA results slide"""
        eda_data = exported_data.get('eda', exported_data.get('eda_results', {}))
        
        insights = eda_data.get('insights', [])
        summary_stats = eda_data.get('summary_statistics', {})
        categorical_analysis = eda_data.get('categorical_analysis', {})
        
        # Extract key findings
        key_findings = []
        
        if summary_stats:
            total_responses = sum(stats.get('total_responses', 0) for stats in summary_stats.values())
            key_findings.append(f"Analyzed {total_responses} total responses")
            key_findings.append(f"Examined {len(summary_stats)} survey questions")
        
        # Add satisfaction findings
        satisfaction_questions = [q_id for q_id, analysis in categorical_analysis.items()
                                if analysis.get('category') in ['satisfaction', 'rating']]
        
        if satisfaction_questions:
            key_findings.append(f"Identified {len(satisfaction_questions)} satisfaction metrics")
        
        # Add top insights
        key_findings.extend(insights[:3])
        
        return {
            'slide_number': 3,
            'slide_type': 'analysis',
            'title': 'Exploratory Data Analysis',
            'content': {
                'overview': 'Comprehensive statistical analysis of survey responses',
                'key_findings': key_findings,
                'data_quality': {
                    'total_questions': len(summary_stats),
                    'response_coverage': 'High',
                    'data_completeness': 'Good'
                },
                'insights': insights[:5] if insights else ['Analysis completed successfully']
            }
        }
    
    def _create_visualization_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create visualization summary slide"""
        viz_data = exported_data.get('visualizations', {})
        
        charts = viz_data.get('charts', [])
        summaries = viz_data.get('summaries', [])
        recommended_charts = viz_data.get('recommended_charts', [])
        
        chart_types = []
        for chart in charts:
            chart_type = chart.get('type', 'unknown')
            if chart_type not in chart_types:
                chart_types.append(chart_type)
        
        return {
            'slide_number': 4,
            'slide_type': 'visualization',
            'title': 'Data Visualizations',
            'content': {
                'overview': 'Visual representation of key data patterns and insights',
                'charts_created': len(charts),
                'chart_types': chart_types,
                'features_analyzed': len(summaries),
                'key_visualizations': [
                    chart.get('title', 'Untitled Chart') for chart in charts[:5]
                ],
                'recommendations': [
                    rec.get('title', 'Additional Chart') for rec in recommended_charts[:3]
                ]
            }
        }
    
    def _create_prediction_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create predictive analytics slide"""
        pred_data = exported_data.get('predictions', {})
        
        metrics = pred_data.get('metrics', {})
        insights = pred_data.get('insights', [])
        recommendations = pred_data.get('recommendations', [])
        classification_models = pred_data.get('classification_models', {})
        
        return {
            'slide_number': 5,
            'slide_type': 'prediction',
            'title': 'Predictive Analytics',
            'content': {
                'overview': 'Machine learning models for customer behavior prediction',
                'model_performance': {
                    'accuracy': f"{metrics.get('accuracy', 0):.1%}",
                    'precision': f"{metrics.get('precision', 0):.1%}",
                    'recall': f"{metrics.get('recall', 0):.1%}",
                    'f1_score': f"{metrics.get('f1_score', 0):.1%}"
                },
                'models_built': len(classification_models),
                'key_insights': insights[:4],
                'recommendations': recommendations[:3]
            }
        }
    
    def _create_trend_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create trend analysis slide"""
        trend_data = exported_data.get('trends', {})
        
        insights = trend_data.get('insights', [])
        satisfaction_trends = trend_data.get('satisfaction_trends', {})
        response_trends = trend_data.get('response_trends', {})
        trend_predictions = trend_data.get('trend_predictions', {})
        
        # Extract key trend information
        trend_direction = 'stable'
        if satisfaction_trends.get('overall_trend'):
            trend_direction = satisfaction_trends['overall_trend'].get('direction', 'stable')
        
        return {
            'slide_number': 6,
            'slide_type': 'trends',
            'title': 'Trend Analysis',
            'content': {
                'overview': 'Temporal patterns and trend identification in customer data',
                'satisfaction_trend': trend_direction.title(),
                'key_trends': insights[:4],
                'predictions': {
                    'satisfaction_forecast': trend_predictions.get('satisfaction_forecast', {}),
                    'confidence_level': 'Medium to High'
                },
                'recommendations': [
                    'Monitor satisfaction trends regularly',
                    'Implement proactive measures for declining trends',
                    'Leverage positive trends for growth opportunities'
                ]
            }
        }
    
    def _create_sentiment_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create sentiment analysis slide"""
        sentiment_data = exported_data.get('sentiment', {})
        
        distribution = sentiment_data.get('sentiment_distribution', {})
        insights = sentiment_data.get('insights', [])
        emotional_keywords = sentiment_data.get('emotional_keywords', {})
        
        percentages = distribution.get('percentages', {})
        
        return {
            'slide_number': 7,
            'slide_type': 'sentiment',
            'title': 'Sentiment Analysis',
            'content': {
                'overview': 'Analysis of customer emotions and sentiment in text responses',
                'sentiment_distribution': {
                    'positive': f"{percentages.get('positive', 0):.1f}%",
                    'neutral': f"{percentages.get('neutral', 0):.1f}%",
                    'negative': f"{percentages.get('negative', 0):.1f}%"
                },
                'total_responses_analyzed': distribution.get('total_responses', 0),
                'key_insights': insights[:4],
                'top_positive_words': [word for word, count in emotional_keywords.get('most_common_positive', [])[:5]],
                'top_negative_words': [word for word, count in emotional_keywords.get('most_common_negative', [])[:5]]
            }
        }
    
    def _create_ab_test_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create A/B testing slide"""
        ab_data = exported_data.get('ab_test', {})
        
        insights = ab_data.get('insights', [])
        recommendations = ab_data.get('recommendations', [])
        test_results = ab_data.get('test_results', [])
        variant_performance = ab_data.get('variant_performance', {})
        
        significant_results = variant_performance.get('significant_results', 0)
        total_tests = len(test_results)
        
        return {
            'slide_number': 8,
            'slide_type': 'ab_testing',
            'title': 'A/B Testing Results',
            'content': {
                'overview': 'Statistical testing of different customer segments and approaches',
                'tests_conducted': total_tests,
                'significant_results': significant_results,
                'success_rate': f"{(significant_results/max(total_tests, 1)*100):.1f}%",
                'key_findings': insights[:4],
                'recommendations': recommendations[:4],
                'winning_variants': dict(variant_performance.get('winning_variants', {}))
            }
        }
    
    def _create_recommendation_slide(self, exported_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create recommendations slide"""
        # Collect recommendations from all modules
        all_recommendations = []
        
        for module_name, module_data in exported_data.items():
            if isinstance(module_data, dict):
                recommendations = module_data.get('recommendations', [])
                insights = module_data.get('insights', [])
                
                # Add module-specific recommendations
                for rec in recommendations[:2]:  # Top 2 per module
                    all_recommendations.append(f"{module_name.title()}: {rec}")
                
                # Convert insights to recommendations
                for insight in insights[:1]:  # Top 1 insight per module
                    if 'recommend' in insight.lower() or 'should' in insight.lower():
                        all_recommendations.append(f"{module_name.title()}: {insight}")
        
        # Prioritize recommendations
        priority_recommendations = []
        operational_recommendations = []
        strategic_recommendations = []
        
        for rec in all_recommendations:
            if any(word in rec.lower() for word in ['urgent', 'immediate', 'critical', 'fix']):
                priority_recommendations.append(rec)
            elif any(word in rec.lower() for word in ['improve', 'optimize', 'enhance', 'increase']):
                operational_recommendations.append(rec)
            else:
                strategic_recommendations.append(rec)
        
        return {
            'slide_number': 9,
            'slide_type': 'recommendations',
            'title': 'Strategic Recommendations',
            'content': {
                'overview': 'Actionable insights and recommendations based on comprehensive analysis',
                'priority_actions': priority_recommendations[:3],
                'operational_improvements': operational_recommendations[:4],
                'strategic_initiatives': strategic_recommendations[:3],
                'next_steps': [
                    'Implement high-priority recommendations immediately',
                    'Develop detailed action plans for operational improvements',
                    'Create timeline for strategic initiatives',
                    'Establish monitoring and measurement framework'
                ]
            }
        }
    
    def _save_presentation(self, presentation_data: Dict[str, Any]) -> str:
        """Save presentation data to file"""
        # Create presentations directory if it doesn't exist
        presentations_dir = 'presentations'
        os.makedirs(presentations_dir, exist_ok=True)
        
        # Generate filename with timestamp
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"BI_Storyteller_Report_{timestamp}.json"
        filepath = os.path.join(presentations_dir, filename)
        
        # Save presentation data as JSON (in real implementation, would create actual PPTX)
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(presentation_data, f, indent=2, ensure_ascii=False)
        
        # Also create a readable summary
        summary_filename = f"BI_Storyteller_Summary_{timestamp}.txt"
        summary_filepath = os.path.join(presentations_dir, summary_filename)
        
        self._create_text_summary(presentation_data, summary_filepath)
        
        return filepath
    
    def _create_text_summary(self, presentation_data: Dict[str, Any], filepath: str):
        """Create a readable text summary of the presentation"""
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("BI STORYTELLER - MARKETING ANALYSIS REPORT\n")
            f.write("="*60 + "\n\n")
            
            metadata = presentation_data.get('metadata', {})
            f.write(f"Generated: {metadata.get('created_date', 'Unknown')}\n")
            f.write(f"Total Slides: {metadata.get('total_slides', 0)}\n")
            f.write(f"Data Sources: {', '.join(metadata.get('data_sources', []))}\n\n")
            
            # Write slide summaries
            for slide in presentation_data.get('slides', []):
                f.write(f"SLIDE {slide.get('slide_number', 0)}: {slide.get('title', 'Untitled')}\n")
                f.write("-" * 40 + "\n")
                
                content = slide.get('content', {})
                
                # Write key content based on slide type
                if slide.get('slide_type') == 'summary':
                    key_metrics = content.get('key_metrics', {})
                    for metric, value in key_metrics.items():
                        f.write(f"â€¢ {metric.replace('_', ' ').title()}: {value}\n")
                    
                    main_findings = content.get('main_findings', [])
                    if main_findings:
                        f.write("\nKey Findings:\n")
                        for finding in main_findings:
                            f.write(f"â€¢ {finding}\n")
                
                elif 'key_findings' in content:
                    f.write("Key Findings:\n")
                    for finding in content['key_findings']:
                        f.write(f"â€¢ {finding}\n")
                
                elif 'key_insights' in content:
                    f.write("Key Insights:\n")
                    for insight in content['key_insights']:
                        f.write(f"â€¢ {insight}\n")
                
                if 'recommendations' in content:
                    f.write("\nRecommendations:\n")
                    for rec in content['recommendations']:
                        f.write(f"â€¢ {rec}\n")
                
                f.write("\n")
            
            f.write("="*60 + "\n")
            f.write("END OF REPORT\n")
            f.write("="*60 + "\n")
    
    def export_to_formats(self, presentation_data: Dict[str, Any]) -> Dict[str, str]:
        """Export presentation to multiple formats"""
        exports = {}
        
        # JSON export (already done in save_presentation)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # CSV export for data tables
        csv_filename = f"BI_Storyteller_Data_{timestamp}.csv"
        csv_filepath = os.path.join('presentations', csv_filename)
        self._export_to_csv(presentation_data, csv_filepath)
        exports['csv'] = csv_filepath
        
        # HTML export for web viewing
        html_filename = f"BI_Storyteller_Report_{timestamp}.html"
        html_filepath = os.path.join('presentations', html_filename)
        self._export_to_html(presentation_data, html_filepath)
        exports['html'] = html_filepath
        
        return exports
    
    def _export_to_csv(self, presentation_data: Dict[str, Any], filepath: str):
        """Export key data to CSV format"""
        import csv
        
        with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # Write header
            writer.writerow(['Slide', 'Title', 'Content Type', 'Key Information'])
            
            # Write slide data
            for slide in presentation_data.get('slides', []):
                slide_num = slide.get('slide_number', 0)
                title = slide.get('title', 'Untitled')
                slide_type = slide.get('slide_type', 'unknown')
                
                content = slide.get('content', {})
                
                # Extract key information based on content
                if 'key_findings' in content:
                    for finding in content['key_findings']:
                        writer.writerow([slide_num, title, 'Finding', finding])
                
                if 'key_insights' in content:
                    for insight in content['key_insights']:
                        writer.writerow([slide_num, title, 'Insight', insight])
                
                if 'recommendations' in content:
                    for rec in content['recommendations']:
                        writer.writerow([slide_num, title, 'Recommendation', rec])
    
    def _export_to_html(self, presentation_data: Dict[str, Any], filepath: str):
        """Export presentation to HTML format"""
        html_content = """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>BI Storyteller Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                .header { background: #2c3e50; color: white; padding: 20px; border-radius: 8px; }
                .slide { margin: 30px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
                .slide-title { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
                .content-section { margin: 15px 0; }
                .metric { background: #ecf0f1; padding: 10px; margin: 5px 0; border-radius: 4px; }
                ul { padding-left: 20px; }
                li { margin: 5px 0; }
            </style>
        </head>
        <body>
        """
        
        metadata = presentation_data.get('metadata', {})
        html_content += f"""
        <div class="header">
            <h1>{metadata.get('title', 'BI Storyteller Report')}</h1>
            <p>Generated: {metadata.get('created_date', 'Unknown')}</p>
            <p>Total Slides: {metadata.get('total_slides', 0)}</p>
        </div>
        """
        
        # Add slides
        for slide in presentation_data.get('slides', []):
            html_content += f"""
            <div class="slide">
                <h2 class="slide-title">Slide {slide.get('slide_number', 0)}: {slide.get('title', 'Untitled')}</h2>
            """
            
            content = slide.get('content', {})
            
            # Add overview if available
            if 'overview' in content:
                html_content += f"<p><strong>Overview:</strong> {content['overview']}</p>"
            
            # Add key metrics
            if 'key_metrics' in content:
                html_content += "<div class='content-section'><h3>Key Metrics</h3>"
                for metric, value in content['key_metrics'].items():
                    html_content += f"<div class='metric'><strong>{metric.replace('_', ' ').title()}:</strong> {value}</div>"
                html_content += "</div>"
            
            # Add findings/insights
            for section_name in ['key_findings', 'key_insights', 'main_findings']:
                if section_name in content:
                    html_content += f"<div class='content-section'><h3>{section_name.replace('_', ' ').title()}</h3><ul>"
                    for item in content[section_name]:
                        html_content += f"<li>{item}</li>"
                    html_content += "</ul></div>"
            
            # Add recommendations
            if 'recommendations' in content:
                html_content += "<div class='content-section'><h3>Recommendations</h3><ul>"
                for rec in content['recommendations']:
                    html_content += f"<li>{rec}</li>"
                html_content += "</ul></div>"
            
            html_content += "</div>"
        
        html_content += """
        </body>
        </html>
        """
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(html_content)